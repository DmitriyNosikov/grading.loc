openapi: 3.0.0
paths:
  /users/register:
    post:
      operationId: UserController_create
      summary: Register new user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserDTO"
      responses:
        "201":
          description: User has been successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRDO"
        "409":
          description: User already exists
      tags: &a1
        - users
  /users/login:
    post:
      operationId: UserController_login
      summary: Login user by passed credentials
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginUserDTO"
      responses:
        "200":
          description: User logged in
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRDO"
        "401":
          description: Incorrect user email/password
      tags: *a1
  /users/check:
    post:
      operationId: UserController_checkToken
      summary: Check user`s JWT-Token
      parameters: []
      responses:
        "201":
          description: ""
      tags: *a1
  /users/{userId}:
    get:
      operationId: UserController_show
      summary: Get detail info about user
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRDO"
        "404":
          description: User not found
      tags: *a1
    delete:
      operationId: UserController_deleteUser
      summary: Delete user
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: User has been successfully deleted
      tags: *a1
  /products:
    post:
      operationId: ProductController_create
      summary: Crate new products item
      parameters:
        - &a2
          name: Authorization
          in: header
          description: Authorization JWT-token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProductRDO"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateProductRDO"
        "401":
          description: Product can be created/updated/deleted only by authorized user
      tags: &a3
        - products
    get:
      operationId: ProductController_index
      summary: Get products list by passed params (or without it)
      parameters:
        - *a2
        - name: sortDirection
          required: false
          in: query
          description: "Sorting direction. Default direction: asc"
          example: " Pdesc"
          schema:
            enum:
              - asc
              - desc
            type: string
        - name: sortType
          required: false
          in: query
          description: "Sorting type. Default sort type: createdAt"
          example: createdAt
          schema:
            enum:
              - price
              - createdAt
            type: string
        - name: page
          required: false
          in: query
          description: 'Current page in pagination (if items count more than "limit").
            Default page: 1'
          example: "1"
          schema: {}
        - name: limit
          required: false
          in: query
          description: "Items per page (pagination). Max limit: 7"
          example: "7"
          schema: {}
        - name: createdAt
          required: false
          in: query
          description: Product creation date
          example: 2024-05-29
          schema: {}
        - name: stringsCount
          required: false
          in: query
          description: Product strings count
          example: "4"
          schema:
            enum:
              - 4
              - 6
              - 7
              - 12
            type: number
        - name: title
          required: false
          in: query
          description: Product title
          example: Richie Sambora`s guitar
          schema: {}
      responses:
        "200":
          description: Product found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductWithPaginationRDO"
        "404":
          description: Product not found
      tags: *a3
  /products/{productId}:
    get:
      operationId: ProductController_show
      summary: Get detail information about product with passed id
      parameters:
        - *a2
        - name: productId
          required: true
          in: path
          example: b0103f3e-a6ac-4719-94bc-60c8294c08c6
          description: Product id
          schema:
            type: string
      responses:
        "200":
          description: Product found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateProductDTO"
        "404":
          description: Product not found
      tags: *a3
    patch:
      operationId: ProductController_update
      summary: Update product fields with passed id
      parameters:
        - *a2
        - name: productId
          required: true
          in: path
          example: b0103f3e-a6ac-4719-94bc-60c8294c08c6
          description: Product id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProductDTO"
      responses:
        "201":
          description: Product has been successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateProductRDO"
        "404":
          description: Product not found
      tags: *a3
    delete:
      operationId: ProductController_delete
      summary: Delete product with passed id
      parameters:
        - *a2
        - name: productId
          required: true
          in: path
          example: b0103f3e-a6ac-4719-94bc-60c8294c08c6
          description: Product id
          schema:
            type: string
      responses:
        "204":
          description: Product has been successfully deleted
        "404":
          description: Product not found
      tags: *a3
info:
  title: The "Guitar Shop" service
  description: Guitar Shop service API
  version: "1.0"
  contact: {}
tags: []
servers: []
components:
  schemas:
    CreateUserDTO:
      type: object
      properties:
        name:
          type: string
          description: User name
          example: Tony
          minimum: 3
          maximum: 50
        email:
          type: string
          description: User email
          example: iron-man@starkindustries.it
        password:
          type: string
          description: User password
          example: jarvis-iron-hearth123
          minimum: 12
          maximum: 6
      required:
        - name
        - email
        - password
    UserRDO:
      type: object
      properties:
        id:
          type: string
          description: Uniq user ID
          example: g83h4y0943-nv934819843-jv934h8t-n923g48n9438
        createdAt:
          format: date-time
          type: string
          description: Created at date
          example: 2024-04-26 13:02:24.847
        updatedAt:
          format: date-time
          type: string
          description: Updated at date
          example: 2024-04-26 13:02:24.847
        name:
          type: string
          description: User name
          example: Tony
        email:
          type: string
          description: User email
          example: iron-man@starkindustries.it
      required:
        - id
        - createdAt
        - updatedAt
        - name
        - email
    LoginUserDTO:
      type: object
      properties:
        email:
          type: string
          description: User email
          example: iron-man@starkindustries.it
        password:
          type: string
          description: User password
          example: jarvis-iron-hearth123
          minimum: 12
          maximum: 6
      required:
        - email
        - password
    CreateProductRDO:
      type: object
      properties:
        id:
          type: string
          description: Product id
          example: pv9230ndfg92381203i9hn-g0924
        createdAt:
          format: date-time
          type: string
          description: Product created date
          example: 2024-05-28 15:01:51.449
        updatedAt:
          format: date-time
          type: string
          description: Product updated date
          example: 2024-05-28 15:01:51.449
        vendorCode:
          type: string
          description: Product vendor code
          example: pv9230ndfg92381203i9hn-g0924
          minimum: 5
          maximum: 40
        title:
          type: string
          description: Product title
          example: Richie Sambora`s guitar
          minimum: 10
          maximum: 100
        description:
          type: string
          description: Product description
          example: It`s a perfect and rair guitar, that was firstly presented on LP
            concert
          minimum: 20
          maximum: 1024
        photo:
          type: string
          description: Product photo URL (.jpg/.png)
          example: http://some.interesting/photo.jpg
        type:
          type: string
          description: Product type
          example: electro
          enum:
            - electro
            - acoustic
            - ukulele
        stringsCount:
          type: number
          description: Product strings count
          example: "4"
          enum: &a4
            - 4
            - 6
            - 7
            - 12
          minimum: 4
          maximum: 12
        price:
          type: number
          description: Product price
          example: "100000"
          minimum: 100
          maximum: 1000000
      required:
        - id
        - createdAt
        - updatedAt
        - vendorCode
        - title
        - description
        - photo
        - type
        - stringsCount
        - price
    ProductWithPaginationRDO:
      type: object
      properties:
        entities:
          description: Product entities array
          allOf:
            - $ref: "#/components/schemas/CreateProductRDO"
        totalPages:
          type: number
          description: Paginated product pages count
          example: 2
        totalItems:
          type: number
          description: Total producs count
          example: 23
        currentPage:
          type: number
          description: Current page number in pagination
          example: 1
        itemsPerPage:
          type: number
          description: product per page
          example: 7
      required:
        - entities
        - totalPages
        - totalItems
        - currentPage
        - itemsPerPage
    CreateProductDTO:
      type: object
      properties:
        vendorCode:
          type: string
          description: Product vendor code
          example: pv9230ndfg92381203i9hn-g0924
          minimum: 5
          maximum: 40
        title:
          type: string
          description: Product title
          example: Richie Sambora`s guitar
          minimum: 10
          maximum: 100
        description:
          type: string
          description: Product description
          example: It`s a perfect and rare guitar, that was firstly presented on LP
            concert
          minimum: 20
          maximum: 1024
        photo:
          type: string
          description: Product photo URL (.jpg/.png)
          example: http://some.interesting/photo.jpg
        type:
          type: string
          description: Product type
          example: electro
          enum:
            - electro
            - acoustic
            - ukulele
        stringsCount:
          type: number
          description: Product strings count
          example: "4"
          enum: *a4
          minimum: 4
          maximum: 12
        price:
          type: number
          description: Product price
          example: "100000"
          minimum: 100
          maximum: 1000000
      required:
        - vendorCode
        - title
        - description
        - photo
        - type
        - stringsCount
        - price
    UpdateProductDTO:
      type: object
      properties:
        vendorCode:
          type: string
          description: Product vendor code
          example: pv9230ndfg92381203i9hn-g0924
          minimum: 5
          maximum: 40
        title:
          type: string
          description: Product title
          example: Richie Sambora`s guitar
          minimum: 10
          maximum: 100
        description:
          type: string
          description: Product description
          example: It`s a perfect and rair guitar, that was firstly presented on LP
            concert
          minimum: 20
          maximum: 1024
        photo:
          type: string
          description: Product photo URL (.jpg/.png)
          example: http://some.interesting/photo.jpg
        type:
          type: string
          description: Product type
          example: electro
          enum:
            - electro
            - acoustic
            - ukulele
          minimum: 10
          maximum: 100
        stringsCount:
          type: number
          description: Product strings count
          example: "4"
          enum: *a4
          minimum: 10
          maximum: 100
        price:
          type: number
          description: Product price
          example: "100000"
          minimum: 10
          maximum: 100
      required:
        - vendorCode
        - title
        - description
        - photo
        - type
        - stringsCount
        - price
